<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  <subtitle>its subtitle</subtitle>
  <link href="http://guogananren.github.io/atom.xml" rel="self"/>
  
  <link href="http://guogananren.github.io/"/>
  <updated>2025-05-07T09:01:56.541Z</updated>
  <id>http://guogananren.github.io/</id>
  
  <author>
    <name>Link</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jump（一）</title>
    <link href="http://guogananren.github.io/2025/05/07/20250507/"/>
    <id>http://guogananren.github.io/2025/05/07/20250507/</id>
    <published>2025-05-07T06:08:28.520Z</published>
    <updated>2025-05-07T09:01:56.541Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-JavaScript有哪些数据类型"><a href="#1-JavaScript有哪些数据类型" class="headerlink" title="1. JavaScript有哪些数据类型"></a>1. JavaScript有哪些数据类型</h4><h5 id="基本数据类型：undefined-null-string-boolean-number-bigInt-symbol"><a href="#基本数据类型：undefined-null-string-boolean-number-bigInt-symbol" class="headerlink" title="基本数据类型：undefined,null,string,boolean,number,bigInt,symbol"></a>基本数据类型：<code>undefined</code>,<code>null</code>,<code>string</code>,<code>boolean</code>,<code>number</code>,<code>bigInt</code>,<code>symbol</code></h5><h5 id="引用数据类型：object"><a href="#引用数据类型：object" class="headerlink" title="引用数据类型：object"></a>引用数据类型：<code>object</code></h5><h5 id="a-类型大小写问题"><a href="#a-类型大小写问题" class="headerlink" title="a.类型大小写问题"></a>a.类型大小写问题</h5><p>数据类型通常以小写开头出现，首字母大写一般被认做是构造函数</p><h5 id="b-symbol和bigInt探究"><a href="#b-symbol和bigInt探究" class="headerlink" title="b.symbol和bigInt探究"></a>b.symbol和bigInt探究</h5><h6 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a><code>symbol</code></h6><p><font color="orange">symbol是es6（es2015）引入，代表独一无二的值，可以用于创建对象的私有属性和方法，避免命名冲突。</font></p><ul><li>唯一性：symbol最重要的特征就是唯一性，即使使用相同的描述创建多个symbol，他们的值也不会相同。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">sym1 === sym2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>原始数据类型：symbol是原始数据类型，不是对象，所以不能使用new关键字来创建，直接调用Symbol()函数即可。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="comment">// const sym = new Symbol()</span></span><br></pre></td></tr></table></figure><ul><li>不可枚举：当symbol作为对象的属性名时，默认不会出现在<code>for...in</code>、<code>for...if</code>循环中，也不会被Object.keys()、Object.getOwnPrototypeNames()等方法获取，可用于创建对象的私有属性。</li></ul><h6 id="bigInt"><a href="#bigInt" class="headerlink" title="bigInt"></a><code>bigInt</code></h6><font color="orange">bigInt用于表示任意大的整数，在bigInt出现之前number类型仅能安全地表示从`-2^53 + 1`到`2^53 - 1`范围内的整数，超出这个范围的整数在进行运算时就可能出现精度丢失的情况。而bigInt则不存在这样的限制，他可以精确的表示任意大小的整数。</font><ul><li>创建bigInt的方式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在整数后面添加n后缀</span></span><br><span class="line"><span class="keyword">const</span> bigInt1 = <span class="number">9007199254740991n</span></span><br><span class="line"><span class="comment">// 使用bigInt()函数</span></span><br><span class="line"><span class="keyword">const</span> bigInt2 = <span class="title class_">BigInt</span>(<span class="number">9007199254740991</span>)</span><br></pre></td></tr></table></figure><ul><li>运算操作<br>bigInt支持大多数常见的数学运算。像加减乘除法等，但不支持一元的<code>+</code>运算符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10n</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">20n</span></span><br><span class="line"><span class="keyword">const</span> sum = a + b <span class="comment">// 30n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元+运算</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10n</span></span><br><span class="line">+i <span class="comment">// 会报错</span></span><br><span class="line">++i <span class="comment">// 11n</span></span><br></pre></td></tr></table></figure><ul><li>比较操作<br>bigInt能够和其他bigInt进行比较，也能和number类型进行比较。不过在在比较时，bigInt和number和是不相等的，即使他们在数值上一样。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigIntNum = <span class="number">10n</span>;</span><br><span class="line"><span class="keyword">const</span> regularNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntNum === regularNum); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntNum == regularNum);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntNum &gt; <span class="number">5</span>);           <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h5 id="c-存储方式探究"><a href="#c-存储方式探究" class="headerlink" title="c.存储方式探究"></a>c.存储方式探究</h5><table><thead><tr><th>数据类型</th><th>存储位置</th><th>存储方式详情</th></tr></thead><tbody><tr><td>undefined</td><td>栈内存</td><td>占据特定内存位置以代表未定义状态</td></tr><tr><td>null</td><td>栈内存</td><td>占据特定内存位置以代表空对象指针状态</td></tr><tr><td>string</td><td>栈内存&#x2F;栈内存指向堆内存</td><td>较短字符串直接存储于栈内存；长字符串栈内存存储指向堆内存中实际字符串数据的引用</td></tr><tr><td>number</td><td>栈内存</td><td>按照IEEE 754双精度64位浮点数标准直接存储数值</td></tr><tr><td>boolean</td><td>栈内存</td><td>直接存储true或false</td></tr><tr><td>bigInt</td><td>栈内存指向堆内存</td><td>栈内存存储对堆内存实际大整数数据的引用</td></tr><tr><td>symbol</td><td>栈内存指向堆内存</td><td>栈内存存储对堆内存实际symbol数据的引用</td></tr><tr><td>object</td><td>栈内存指向堆内存</td><td>栈内存存储指向堆内存中对象实际存储位置的引用，对象具体内容存储于堆内存</td></tr></tbody></table><hr><h4 id="2-数据类型的检测方式有哪些"><a href="#2-数据类型的检测方式有哪些" class="headerlink" title="2. 数据类型的检测方式有哪些"></a>2. 数据类型的检测方式有哪些</h4><h5 id="a-typeof"><a href="#a-typeof" class="headerlink" title="a.typeof"></a>a.<code>typeof</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>) <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>) <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>) <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123n</span>) <span class="comment">// &#x27;bigint&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)) <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;) <span class="comment">// &#x27;function&#x27;</span></span><br></pre></td></tr></table></figure><p>其中数组、对象、null都会被判定为object，其他判断正常</p><h5 id="b-instanceof"><a href="#b-instanceof" class="headerlink" title="b.instanceof"></a>b.<code>instanceof</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>instanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中是否能找到该类型的原型。只能判断引用数据类型。instanceof可以用来测试一个对象在其原型链中是否存在一个构造函数的prototype属性。</p><h5 id="c-constructor"><a href="#c-constructor" class="headerlink" title="c.constructor"></a>c.<code>constructor</code></h5><p>constructor有两个作用，一是判断数据的类型，二是对象实例通过constructor对象访问它的构造函数。需要注意的是如果创建一个对象来改变他的原型，constructor就不能用来判断数据类型了。</p><h5 id="d-Object-prototype-toString-call"><a href="#d-Object-prototype-toString-call" class="headerlink" title="d.Object.prototype.toString.call()"></a>d.<code>Object.prototype.toString.call()</code></h5><p>直接调用toString方法，是走的重写后的toString逻辑。</p><hr><h4 id="3-null和undefined的区别"><a href="#3-null和undefined的区别" class="headerlink" title="3. null和undefined的区别"></a>3. null和undefined的区别</h4><p>undefined的含义是未定义，一般变量声明了但还没有定义的时候会返回；<br>null的含义是空对象，主要用于赋值给一些可能会返回对象的变量，作为初始化。<br>当使用<code>==</code>进行二者的比较是返回true，使用<code>===</code>返回false</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-JavaScript有哪些数据类型&quot;&gt;&lt;a href=&quot;#1-JavaScript有哪些数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. JavaScript有哪些数据类型&quot;&gt;&lt;/a&gt;1. JavaScript有哪些数据类型&lt;/h4&gt;&lt;h5</summary>
      
    
    
    
    <category term="8文" scheme="http://guogananren.github.io/categories/8%E6%96%87/"/>
    
    <category term="javascript" scheme="http://guogananren.github.io/categories/8%E6%96%87/javascript/"/>
    
    
    <category term="May" scheme="http://guogananren.github.io/tags/May/"/>
    
  </entry>
  
  <entry>
    <title>修</title>
    <link href="http://guogananren.github.io/2025/04/29/%E4%BF%AE/"/>
    <id>http://guogananren.github.io/2025/04/29/%E4%BF%AE/</id>
    <published>2025-04-29T02:39:17.182Z</published>
    <updated>2025-04-29T02:42:13.908Z</updated>
    
    <content type="html"><![CDATA[<p>近期，又双叒叕迷上了一部国产武侠篇——少年歌行。拢共出了三季，每季至少24级起步，愣是被我两周看完了。可喜也可叹，喜是品之有味，叹是精力无处施展。但这里是讲的另一种感想。对于剧中每个人的称谓我悟了一些。其一，剧中人物大多以全名相称，而对外则会采用昵称或敬称，例如苏甲和萧已拜自同一师门下是要好的师兄弟关系，苏甲和萧已对内（两人之间对话）是以全名相称，拟造一个场景，苏甲叫萧已去就餐，苏甲猛地推开萧已到房门道：萧已你苦了自己也不能苦了肚子啊，你大哥我可要先行一步，不管你了！随后只听房门哐啷哐啷的碰撞着门槛，门口此人已消失不见，扬长而去奔向了食堂。萧已心想：苏甲这厮，辈分乱了不说，进人房门也不礼貌叩门，可得去师父跟前嚼嚼嘴根……<br>这里苏甲是师弟，萧已是师兄，他们之前的称谓则是以全名相称。其二，男女相称，男女之间多以姑娘公子相称.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期，又双叒叕迷上了一部国产武侠篇——少年歌行。拢共出了三季，每季至少24级起步，愣是被我两周看完了。可喜也可叹，喜是品之有味，叹是精力无处施展。但这里是讲的另一种感想。对于剧中每个人的称谓我悟了一些。其一，剧中人物大多以全名相称，而对外则会采用昵称或敬称，例如苏甲和萧已拜</summary>
      
    
    
    
    <category term="杂" scheme="http://guogananren.github.io/categories/%E6%9D%82/"/>
    
    
    <category term="oc" scheme="http://guogananren.github.io/tags/oc/"/>
    
  </entry>
  
  <entry>
    <title>myword</title>
    <link href="http://guogananren.github.io/2025/04/28/myword/"/>
    <id>http://guogananren.github.io/2025/04/28/myword/</id>
    <published>2025-04-28T01:50:38.000Z</published>
    <updated>2025-04-28T07:27:45.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hey-its-wonderful"><a href="#hey-its-wonderful" class="headerlink" title="hey, its wonderful"></a>hey, its wonderful</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hey-its-wonderful&quot;&gt;&lt;a href=&quot;#hey-its-wonderful&quot; class=&quot;headerlink&quot; title=&quot;hey, its wonderful&quot;&gt;&lt;/a&gt;hey, its wonderful&lt;/h2&gt;</summary>
      
    
    
    
    <category term="cateDemo" scheme="http://guogananren.github.io/categories/cateDemo/"/>
    
    
    <category term="demo" scheme="http://guogananren.github.io/tags/demo/"/>
    
    <category term="tags" scheme="http://guogananren.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://guogananren.github.io/2025/04/27/hello-world/"/>
    <id>http://guogananren.github.io/2025/04/27/hello-world/</id>
    <published>2025-04-27T09:58:46.938Z</published>
    <updated>2025-04-28T07:23:28.455Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="demo" scheme="http://guogananren.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
