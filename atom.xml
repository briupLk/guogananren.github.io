<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  <subtitle>its subtitle</subtitle>
  <link href="http://guogananren.github.io/atom.xml" rel="self"/>
  
  <link href="http://guogananren.github.io/"/>
  <updated>2025-06-11T08:03:28.520Z</updated>
  <id>http://guogananren.github.io/</id>
  
  <author>
    <name>Link</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jump（叁）</title>
    <link href="http://guogananren.github.io/2025/06/06/20250606/"/>
    <id>http://guogananren.github.io/2025/06/06/20250606/</id>
    <published>2025-06-06T03:48:17.058Z</published>
    <updated>2025-06-11T08:03:28.520Z</updated>
    
    <content type="html"><![CDATA[<h4 id="16-对JSON的理解"><a href="#16-对JSON的理解" class="headerlink" title="16. 对JSON的理解"></a>16. 对JSON的理解</h4><p>JSON是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。<br>在项目开发中，使用JSON作为前后端数据交换的方式。在前端通过将一个符合JSON格式的数据结构序列化为JSON字符串，然后将他传递到后端，后端通过JSON格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。因为JSON的语法是基于js的，因此很容易将JSON和js中的对象弄混，但是应该注意的是JSON和js对象不是一回事，JSON中对象格式更加严格，比如说在JSON中属性值不能为函数，不能出先NaN这样的属性值等，因此大多数的js对象是不符合JSON对象的格式。<br>JSON存在两个方法：<br><code>JSON.stringify()</code><br><code>JSON.parse()</code></p><h4 id="17-JavaScript脚本延迟加在的方式有哪些"><a href="#17-JavaScript脚本延迟加在的方式有哪些" class="headerlink" title="17. JavaScript脚本延迟加在的方式有哪些"></a>17. JavaScript脚本延迟加在的方式有哪些</h4><p>延迟加载就是等页面加载完成之后再加在JavaScript文件。js延迟加载有助于提高页面的加载速度。<br>defer属性：<br>给js脚本添加defer属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样能使页面的渲染不被阻塞。多个设置了defer属性的脚本按规范来说最后是顺序执行的，分浏览器。<br>async属性：<br>给js脚本添加async属性，这个属性会是脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后会立即执行js脚本，这个时候如果文档没有解析完成同样会阻塞。多个async属性的脚本执行顺序是不可测的。<br>动态创建DOM方式：<br>动态创建DOM标签的方式，可以对文档的加载时间进行监听，当文档加载完成后再动态的创建script标签来引入js脚本。<br>使用setTimeout延迟方式：<br>设置一个定时器来延迟加载js脚本文件。<br>让JS最后加载：<br>将js脚本放在文档的底部，来使js脚本尽可能的在最后来加载执行。</p><h4 id="18-什么是DOM和BOM"><a href="#18-什么是DOM和BOM" class="headerlink" title="18. 什么是DOM和BOM"></a>18. 什么是DOM和BOM</h4><p>DOM：<br>指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。<br>BOM：<br>指的是浏览器对象模型，他指的是把浏览器当做个对象，这个对象主要定义了与浏览器进行交互的方法和接口。BOM的核心是window，而window对象具有双重角色，它既是通过js访问浏览器窗口的一个接口，又是一个全局对象。这意味着在网页上定义的任何对象、变量和函数，都作为全局对象的一个属性或者方法存在。window对象包含location对象、navigator对象和、screen对象等子对象。DOM的最根本的对象document对象也是BOM对象的一个子对象。</p><h4 id="19-escape-encodeURI-encodeURIComponent的区别"><a href="#19-escape-encodeURI-encodeURIComponent的区别" class="headerlink" title="19. escape,encodeURI,encodeURIComponent的区别"></a>19. escape,encodeURI,encodeURIComponent的区别</h4><p>encodeURI是对整个URI进行转义，将URI中的非法字符转换为合法字符。<br>encodeURIComponent是对URI的组成部分进行转义，所以一些特殊字符也会得到转义。<br>escape和encodeURI作用相同（已弃用）</p><h4 id="20-对Ajax的理解，实现一个Ajax的请求"><a href="#20-对Ajax的理解，实现一个Ajax的请求" class="headerlink" title="20. 对Ajax的理解，实现一个Ajax的请求"></a>20. 对Ajax的理解，实现一个Ajax的请求</h4><p>Ajax是Asynchronous JavaScript and XML的缩写。指的是通过JavaScript的异步通信，从服务器获取XML文档中获取数据，再更新到当前网页的对应部分，而不刷新整个网页。<br>创建Ajax请求对步骤：<br>a.创建一个XMLHttpRequest对象<br>b.xhr对象使用open方法创建一个http请求<br>c.为xhr对象增加请求头等信息，setRequestHeader()<br>d.为xhr对象增加状态监听函数。一个xhr对象一个拥有五个状态，当状态发生变化时会调用函数onreadystatechange，可以通过监听该函数来处理请求成功后的结果。当对象的readyState变为4时，代表服务器返回的数据接收完成。<br>e.判断请求返回的状态。如果状态是2xx或304则代表返回正常。<br>f.通过response中的数据对页面进行更新<br>g.调用sent方法传入参数，来向服务器发送请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SERVER_URL</span> = <span class="string">&#x27;/server&#x27;</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 请求方法，请求地址，是否异步和用户的认证信息</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 请求成功时</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置请求失败函数</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置请求头参数</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">xhr.<span class="property">setRequestHeader</span> = (<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>使用Promise封装Ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getJson</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-ES6与CommonJS模块有什么异同"><a href="#22-ES6与CommonJS模块有什么异同" class="headerlink" title="22. ES6与CommonJS模块有什么异同"></a>22. ES6与CommonJS模块有什么异同</h4><p>不同点：<br>CommonJS是对模块的浅拷贝；ES6是对模块的引用。即ES6只存只读，不能改变其值，类似const。<br>共同点：<br>都可以对引入的对象进行赋值，即对对象内部属性的值进行改变。</p><h4 id="23-for…in和for…of的区别"><a href="#23-for…in和for…of的区别" class="headerlink" title="23. for…in和for…of的区别"></a>23. for…in和for…of的区别</h4><p>for…of遍历键值，for…in遍历键名。<br>for…of只会遍历当前对象，for…in会遍历对象的整个原型链，性能很差。<br>对于数组的遍历：<br>for…of只返回数组的下标对应值，for…in会返回数组中所有的可枚举属性（包括原型链上可枚举的属性）<br>for…of循环可以用来遍历数组、可迭代对象、字符串、Set、Map和Generator对象，for…in主要是为了遍历对象而生，不适用于数组。</p><h4 id="24-ajax、fetch、axios的区别"><a href="#24-ajax、fetch、axios的区别" class="headerlink" title="24. ajax、fetch、axios的区别"></a>24. ajax、fetch、axios的区别</h4><p>ajax（AsynchronousJavascriptAndXml）：<br>是一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。<br>本身是一种MVC编程，不符合前端MVVM。<br>Fetch：<br>是ajax的替代品，在es6出现，使用es6的promise对象。fetch不是ajax的进一步封装，没有使用XMLHttpRequest对象。<br>缺点是只对网络请求报错，对400,500的请求都当做成功。<br>axios：<br>基于Promise封装的Http客户端。<br>浏览器发起XMLHttpRequest请求。</p><h4 id="25-对原型、原型链的理解"><a href="#25-对原型、原型链的理解" class="headerlink" title="25. 对原型、原型链的理解"></a>25. 对原型、原型链的理解</h4><p>原型：<br>在js中使用构造函数来创建一个对象时，每一个构造函数的内部都有一个prototype属性，他的属性是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的prototype属性对应值，在es5中这个指针被称为对象的原型。可以使用__proto__来访问这一属性，但直接这样访问是不规范的，es5新增了一个Object.getPrototypeOf()方法，通过调用它来获取对象的原型。<br>原型链：<br>当访问一个对象的属性时，如果对象内部不存在这个属性，那么他就会去他的原型对象里去找，原型对象又会有自己的原型，一直这样找下去，这就是原型链的概念。<br>原型链的尽头一般都是Object.prototype所有这就是新建的对象为什么能够使用toString()等方法的原因。<br>js对象是通过引用来传递的，创建的每一个新对象实例中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p><h4 id="26-原型链的终点是什么？如何打印出原型链的终点？"><a href="#26-原型链的终点是什么？如何打印出原型链的终点？" class="headerlink" title="26. 原型链的终点是什么？如何打印出原型链的终点？"></a>26. 原型链的终点是什么？如何打印出原型链的终点？</h4><p>由于Object是构造函数，原型链的终点是Object.prototype.__proto__，而Object.prototype.__proto__&#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true。所以，原型链的终点是null。原型链上所有的原型都是对象，所有的对象最终都是由Object构造的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;16-对JSON的理解&quot;&gt;&lt;a href=&quot;#16-对JSON的理解&quot; class=&quot;headerlink&quot; title=&quot;16. 对JSON的理解&quot;&gt;&lt;/a&gt;16. 对JSON的理解&lt;/h4&gt;&lt;p&gt;JSON是一种基于文本的轻量级的数据交换格式。它可以被任何的编程</summary>
      
    
    
    
    <category term="8文" scheme="http://guogananren.github.io/categories/8%E6%96%87/"/>
    
    <category term="javascript" scheme="http://guogananren.github.io/categories/8%E6%96%87/javascript/"/>
    
    
    <category term="June" scheme="http://guogananren.github.io/tags/June/"/>
    
  </entry>
  
  <entry>
    <title>jump（二）</title>
    <link href="http://guogananren.github.io/2025/06/03/20250603/"/>
    <id>http://guogananren.github.io/2025/06/03/20250603/</id>
    <published>2025-06-03T09:27:55.664Z</published>
    <updated>2025-06-05T07:08:11.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="5-如何获取安全的undefined值"><a href="#5-如何获取安全的undefined值" class="headerlink" title="5. 如何获取安全的undefined值"></a>5. 如何获取安全的undefined值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">void</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="6-使用Object-is-与比较操作符“-”和“-”的区别"><a href="#6-使用Object-is-与比较操作符“-”和“-”的区别" class="headerlink" title="6. 使用Object.is()与比较操作符“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”的区别"></a>6. 使用Object.is()与比较操作符“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”的区别</h4><p>双等号：如果两边的类型不一致，会进行类型强制转换后再进行比较<br>三等号：如果两边的类型不一致，直接返回false<br>Object.is()：一般情况下和三等号一致。处理了一些特殊情况，比如-0和+0不再相等，两个NaN是相等的。</p><h4 id="7-JavaScript的包装类型"><a href="#7-JavaScript的包装类型" class="headerlink" title="7. JavaScript的包装类型"></a>7. JavaScript的包装类型</h4><p>在JavaScript中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时JavaScript会在后台隐式地将基本类型转换为对象。</p><h4 id="8-为什么有BigInt的提案"><a href="#8-为什么有BigInt的提案" class="headerlink" title="8. 为什么有BigInt的提案"></a>8. 为什么有BigInt的提案</h4><p>JavaScript中<code>Number.MAX_SAFE_INTEGER</code>表示最大安全数字，即在这个范围内不会出现精度丢失。但是一旦超过这个范围，js就会出现计算不准确的情况。</p><h4 id="9-如何判断一个对象是空对象"><a href="#9-如何判断一个对象是空对象" class="headerlink" title="9. 如何判断一个对象是空对象"></a>9. 如何判断一个对象是空对象</h4><p>使用JSON.stringify方法来判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Json</span>.<span class="title function_">stringify</span>(obj) === <span class="string">&#x27;&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>使用ES6新增的方法Object.keys()来判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span> &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="10-const对象的属性可以修改吗"><a href="#10-const对象的属性可以修改吗" class="headerlink" title="10. const对象的属性可以修改吗"></a>10. const对象的属性可以修改吗</h4><p>const保证的并不是变量的值不能变，而是变量指向的内存地址不能改动。</p><h4 id="11-new操作符的实现步骤"><a href="#11-new操作符的实现步骤" class="headerlink" title="11. new操作符的实现步骤"></a>11. new操作符的实现步骤</h4><p>箭头函数没有prototype，无法New一个剪头函数<br>i. 创建一个新的对象<br>ii. 将新对象的原型与构造函数的prototype关联，即继承<br>iii. 执行构造函数，构造函数会以新对象作为this的上下文来执行<br>iv. 返回新对象</p><h4 id="12-箭头函数的this指向哪里"><a href="#12-箭头函数的this指向哪里" class="headerlink" title="12. 箭头函数的this指向哪里"></a>12. 箭头函数的this指向哪里</h4><p>剪头函数并没有自己的this，所谓的this是捕获其所在上下文的this值，作为自己的this。<br>Babel：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">getArr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转化后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">getArr</span>: <span class="keyword">function</span> <span class="title function_">getArr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(_this === obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-拓展运算符的作用及使用场景"><a href="#13-拓展运算符的作用及使用场景" class="headerlink" title="13. 拓展运算符的作用及使用场景"></a>13. 拓展运算符的作用及使用场景</h4><h5 id="a-对象扩展运算符"><a href="#a-对象扩展运算符" class="headerlink" title="a.对象扩展运算符"></a>a.对象扩展运算符</h5><p>用于取出参数对象中的所有可遍历属性，浅拷贝到当前对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; ..<span class="property">obj</span> &#125;</span><br></pre></td></tr></table></figure><p>上述等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj)</span><br></pre></td></tr></table></figure><p><code>Object.assign(target, source)</code>方法用于对象的合并，将原对象（source）的所有可枚举属性，复制到目标对象（target）。<br>扩展运算符对对象实例的拷贝属于浅拷贝</p><h5 id="b-数组拓展运算符"><a href="#b-数组拓展运算符" class="headerlink" title="b.数组拓展运算符"></a>b.数组拓展运算符</h5><p>每次只能展开一个层数组<br>应用：<br>将数组转换为参数列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> number = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="title function_">add</span>(...number)</span><br></pre></td></tr></table></figure><p>复制数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1]</span><br></pre></td></tr></table></figure><p>合并数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [...arr1, ...arr2, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>与解构赋值结合（拓展符只能位于最后）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// first 1</span></span><br><span class="line"><span class="comment">// rest [2, 3]</span></span><br></pre></td></tr></table></figure><p>将字符串转换为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [...<span class="string">&#x27;string&#x27;</span>] <span class="comment">// [&#x27;s&#x27;,&#x27;t&#x27;,&#x27;r&#x27;,&#x27;i&#x27;,&#x27;n&#x27;,&#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="14-Proxy可以实现什么功能"><a href="#14-Proxy可以实现什么功能" class="headerlink" title="14. Proxy可以实现什么功能"></a>14. Proxy可以实现什么功能</h4><p>在vue3.0中Proxy用来代替Object.definePrototype来实现数据响应式。<br>Proxy是ES6中新增的功能，他可以用来自定义对象中的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p>target代表需要添加代理的对象，handler用来自定义对象中的操作，比如可以用来自定义set和get方法。<br>实现数据响应式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">onWatch</span> = (<span class="params">obj ,setBind, getLogger</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property, receiver</span>) &#123;</span><br><span class="line">      <span class="title function_">getLogger</span>(target, property)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, property, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, value, receiver</span>) &#123;</span><br><span class="line">      <span class="title function_">setBind</span>(value, property)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,property, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj ,handler)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="title function_">onWatch</span>(</span><br><span class="line">  obj,</span><br><span class="line">  <span class="function">(<span class="params">v, property</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听到属性<span class="subst">$&#123;property&#125;</span>改变为<span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">target, property</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;property&#125;</span> = <span class="subst">$&#123;target[property]&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p.<span class="property">a</span> = <span class="number">2</span> <span class="comment">// 监听到属性a改变为2</span></span><br><span class="line">p.<span class="property">a</span> <span class="comment">// a = 2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;5-如何获取安全的undefined值&quot;&gt;&lt;a href=&quot;#5-如何获取安全的undefined值&quot; class=&quot;headerlink&quot; title=&quot;5. 如何获取安全的undefined值&quot;&gt;&lt;/a&gt;5. 如何获取安全的undefined值&lt;/h4&gt;&lt;fi</summary>
      
    
    
    
    <category term="8文" scheme="http://guogananren.github.io/categories/8%E6%96%87/"/>
    
    <category term="javascript" scheme="http://guogananren.github.io/categories/8%E6%96%87/javascript/"/>
    
    
    <category term="June" scheme="http://guogananren.github.io/tags/June/"/>
    
  </entry>
  
  <entry>
    <title>jump（一）</title>
    <link href="http://guogananren.github.io/2025/05/07/20250507/"/>
    <id>http://guogananren.github.io/2025/05/07/20250507/</id>
    <published>2025-05-07T06:08:28.520Z</published>
    <updated>2025-05-07T09:01:56.541Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-JavaScript有哪些数据类型"><a href="#1-JavaScript有哪些数据类型" class="headerlink" title="1. JavaScript有哪些数据类型"></a>1. JavaScript有哪些数据类型</h4><h5 id="基本数据类型：undefined-null-string-boolean-number-bigInt-symbol"><a href="#基本数据类型：undefined-null-string-boolean-number-bigInt-symbol" class="headerlink" title="基本数据类型：undefined,null,string,boolean,number,bigInt,symbol"></a>基本数据类型：<code>undefined</code>,<code>null</code>,<code>string</code>,<code>boolean</code>,<code>number</code>,<code>bigInt</code>,<code>symbol</code></h5><h5 id="引用数据类型：object"><a href="#引用数据类型：object" class="headerlink" title="引用数据类型：object"></a>引用数据类型：<code>object</code></h5><h5 id="a-类型大小写问题"><a href="#a-类型大小写问题" class="headerlink" title="a.类型大小写问题"></a>a.类型大小写问题</h5><p>数据类型通常以小写开头出现，首字母大写一般被认做是构造函数</p><h5 id="b-symbol和bigInt探究"><a href="#b-symbol和bigInt探究" class="headerlink" title="b.symbol和bigInt探究"></a>b.symbol和bigInt探究</h5><h6 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a><code>symbol</code></h6><p><font color="orange">symbol是es6（es2015）引入，代表独一无二的值，可以用于创建对象的私有属性和方法，避免命名冲突。</font></p><ul><li>唯一性：symbol最重要的特征就是唯一性，即使使用相同的描述创建多个symbol，他们的值也不会相同。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">sym1 === sym2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>原始数据类型：symbol是原始数据类型，不是对象，所以不能使用new关键字来创建，直接调用Symbol()函数即可。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="comment">// const sym = new Symbol()</span></span><br></pre></td></tr></table></figure><ul><li>不可枚举：当symbol作为对象的属性名时，默认不会出现在<code>for...in</code>、<code>for...if</code>循环中，也不会被Object.keys()、Object.getOwnPrototypeNames()等方法获取，可用于创建对象的私有属性。</li></ul><h6 id="bigInt"><a href="#bigInt" class="headerlink" title="bigInt"></a><code>bigInt</code></h6><font color="orange">bigInt用于表示任意大的整数，在bigInt出现之前number类型仅能安全地表示从`-2^53 + 1`到`2^53 - 1`范围内的整数，超出这个范围的整数在进行运算时就可能出现精度丢失的情况。而bigInt则不存在这样的限制，他可以精确的表示任意大小的整数。</font><ul><li>创建bigInt的方式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在整数后面添加n后缀</span></span><br><span class="line"><span class="keyword">const</span> bigInt1 = <span class="number">9007199254740991n</span></span><br><span class="line"><span class="comment">// 使用bigInt()函数</span></span><br><span class="line"><span class="keyword">const</span> bigInt2 = <span class="title class_">BigInt</span>(<span class="number">9007199254740991</span>)</span><br></pre></td></tr></table></figure><ul><li>运算操作<br>bigInt支持大多数常见的数学运算。像加减乘除法等，但不支持一元的<code>+</code>运算符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10n</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">20n</span></span><br><span class="line"><span class="keyword">const</span> sum = a + b <span class="comment">// 30n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元+运算</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10n</span></span><br><span class="line">+i <span class="comment">// 会报错</span></span><br><span class="line">++i <span class="comment">// 11n</span></span><br></pre></td></tr></table></figure><ul><li>比较操作<br>bigInt能够和其他bigInt进行比较，也能和number类型进行比较。不过在在比较时，bigInt和number和是不相等的，即使他们在数值上一样。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigIntNum = <span class="number">10n</span>;</span><br><span class="line"><span class="keyword">const</span> regularNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntNum === regularNum); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntNum == regularNum);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntNum &gt; <span class="number">5</span>);           <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h5 id="c-存储方式探究"><a href="#c-存储方式探究" class="headerlink" title="c.存储方式探究"></a>c.存储方式探究</h5><table><thead><tr><th>数据类型</th><th>存储位置</th><th>存储方式详情</th></tr></thead><tbody><tr><td>undefined</td><td>栈内存</td><td>占据特定内存位置以代表未定义状态</td></tr><tr><td>null</td><td>栈内存</td><td>占据特定内存位置以代表空对象指针状态</td></tr><tr><td>string</td><td>栈内存&#x2F;栈内存指向堆内存</td><td>较短字符串直接存储于栈内存；长字符串栈内存存储指向堆内存中实际字符串数据的引用</td></tr><tr><td>number</td><td>栈内存</td><td>按照IEEE 754双精度64位浮点数标准直接存储数值</td></tr><tr><td>boolean</td><td>栈内存</td><td>直接存储true或false</td></tr><tr><td>bigInt</td><td>栈内存指向堆内存</td><td>栈内存存储对堆内存实际大整数数据的引用</td></tr><tr><td>symbol</td><td>栈内存指向堆内存</td><td>栈内存存储对堆内存实际symbol数据的引用</td></tr><tr><td>object</td><td>栈内存指向堆内存</td><td>栈内存存储指向堆内存中对象实际存储位置的引用，对象具体内容存储于堆内存</td></tr></tbody></table><hr><h4 id="2-数据类型的检测方式有哪些"><a href="#2-数据类型的检测方式有哪些" class="headerlink" title="2. 数据类型的检测方式有哪些"></a>2. 数据类型的检测方式有哪些</h4><h5 id="a-typeof"><a href="#a-typeof" class="headerlink" title="a.typeof"></a>a.<code>typeof</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>) <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>) <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>) <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123n</span>) <span class="comment">// &#x27;bigint&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>)) <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;) <span class="comment">// &#x27;function&#x27;</span></span><br></pre></td></tr></table></figure><p>其中数组、对象、null都会被判定为object，其他判断正常</p><h5 id="b-instanceof"><a href="#b-instanceof" class="headerlink" title="b.instanceof"></a>b.<code>instanceof</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>instanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中是否能找到该类型的原型。只能判断引用数据类型。instanceof可以用来测试一个对象在其原型链中是否存在一个构造函数的prototype属性。</p><h5 id="c-constructor"><a href="#c-constructor" class="headerlink" title="c.constructor"></a>c.<code>constructor</code></h5><p>constructor有两个作用，一是判断数据的类型，二是对象实例通过constructor对象访问它的构造函数。需要注意的是如果创建一个对象来改变他的原型，constructor就不能用来判断数据类型了。</p><h5 id="d-Object-prototype-toString-call"><a href="#d-Object-prototype-toString-call" class="headerlink" title="d.Object.prototype.toString.call()"></a>d.<code>Object.prototype.toString.call()</code></h5><p>直接调用toString方法，是走的重写后的toString逻辑。</p><hr><h4 id="3-null和undefined的区别"><a href="#3-null和undefined的区别" class="headerlink" title="3. null和undefined的区别"></a>3. null和undefined的区别</h4><p>undefined的含义是未定义，一般变量声明了但还没有定义的时候会返回；<br>null的含义是空对象，主要用于赋值给一些可能会返回对象的变量，作为初始化。<br>当使用<code>==</code>进行二者的比较是返回true，使用<code>===</code>返回false</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-JavaScript有哪些数据类型&quot;&gt;&lt;a href=&quot;#1-JavaScript有哪些数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. JavaScript有哪些数据类型&quot;&gt;&lt;/a&gt;1. JavaScript有哪些数据类型&lt;/h4&gt;&lt;h5</summary>
      
    
    
    
    <category term="8文" scheme="http://guogananren.github.io/categories/8%E6%96%87/"/>
    
    <category term="javascript" scheme="http://guogananren.github.io/categories/8%E6%96%87/javascript/"/>
    
    
    <category term="May" scheme="http://guogananren.github.io/tags/May/"/>
    
  </entry>
  
  <entry>
    <title>修</title>
    <link href="http://guogananren.github.io/2025/04/29/%E4%BF%AE/"/>
    <id>http://guogananren.github.io/2025/04/29/%E4%BF%AE/</id>
    <published>2025-04-29T02:39:17.182Z</published>
    <updated>2025-04-29T02:42:13.908Z</updated>
    
    <content type="html"><![CDATA[<p>近期，又双叒叕迷上了一部国产武侠篇——少年歌行。拢共出了三季，每季至少24级起步，愣是被我两周看完了。可喜也可叹，喜是品之有味，叹是精力无处施展。但这里是讲的另一种感想。对于剧中每个人的称谓我悟了一些。其一，剧中人物大多以全名相称，而对外则会采用昵称或敬称，例如苏甲和萧已拜自同一师门下是要好的师兄弟关系，苏甲和萧已对内（两人之间对话）是以全名相称，拟造一个场景，苏甲叫萧已去就餐，苏甲猛地推开萧已到房门道：萧已你苦了自己也不能苦了肚子啊，你大哥我可要先行一步，不管你了！随后只听房门哐啷哐啷的碰撞着门槛，门口此人已消失不见，扬长而去奔向了食堂。萧已心想：苏甲这厮，辈分乱了不说，进人房门也不礼貌叩门，可得去师父跟前嚼嚼嘴根……<br>这里苏甲是师弟，萧已是师兄，他们之前的称谓则是以全名相称。其二，男女相称，男女之间多以姑娘公子相称.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期，又双叒叕迷上了一部国产武侠篇——少年歌行。拢共出了三季，每季至少24级起步，愣是被我两周看完了。可喜也可叹，喜是品之有味，叹是精力无处施展。但这里是讲的另一种感想。对于剧中每个人的称谓我悟了一些。其一，剧中人物大多以全名相称，而对外则会采用昵称或敬称，例如苏甲和萧已拜</summary>
      
    
    
    
    <category term="杂" scheme="http://guogananren.github.io/categories/%E6%9D%82/"/>
    
    
    <category term="oc" scheme="http://guogananren.github.io/tags/oc/"/>
    
  </entry>
  
  <entry>
    <title>myword</title>
    <link href="http://guogananren.github.io/2025/04/28/myword/"/>
    <id>http://guogananren.github.io/2025/04/28/myword/</id>
    <published>2025-04-28T01:50:38.000Z</published>
    <updated>2025-04-28T07:27:45.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hey-its-wonderful"><a href="#hey-its-wonderful" class="headerlink" title="hey, its wonderful"></a>hey, its wonderful</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hey-its-wonderful&quot;&gt;&lt;a href=&quot;#hey-its-wonderful&quot; class=&quot;headerlink&quot; title=&quot;hey, its wonderful&quot;&gt;&lt;/a&gt;hey, its wonderful&lt;/h2&gt;</summary>
      
    
    
    
    <category term="cateDemo" scheme="http://guogananren.github.io/categories/cateDemo/"/>
    
    
    <category term="demo" scheme="http://guogananren.github.io/tags/demo/"/>
    
    <category term="tags" scheme="http://guogananren.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://guogananren.github.io/2025/04/27/hello-world/"/>
    <id>http://guogananren.github.io/2025/04/27/hello-world/</id>
    <published>2025-04-27T09:58:46.938Z</published>
    <updated>2025-04-28T07:23:28.455Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="demo" scheme="http://guogananren.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
